[["index.html", "ClusterGVis Reference Book Chapter 1 About 1.1 Citation 1.2 Installation 1.3 Bugs", " ClusterGVis Reference Book Jun Zhang 2024-10-25 Chapter 1 About To enhance clustering and visualization of time-series gene expression data from RNA-Seq experiments, we present the ClusterGVis package. This tool enables concise and elegant analysis of time-series gene expression data in a simple, one-step operation. Additionally, you can perform enrichment analysis for each cluster using the enrichCluster function, which integrates seamlessly with clusterProfiler. ClusterGVis empowers you to create publication-quality visualizations with ease. 1.1 Citation Jun Zhang (2022). ClusterGVis: One-step to Cluster and Visualize Gene Expression Matrix. https://github.com/junjunlab/ClusterGVis 1.2 Installation You can install the development version of ClusterGVis: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/ClusterGVis&quot;) # or remotes::install_github(&quot;junjunlab/ClusterGVis&quot;) library(ClusterGVis) 1.3 Bugs Please leave an issue if you encounter any problems or have any questions on github. https://github.com/junjunlab/ClusterGVis/issues "],["basic-usage.html", "Chapter 2 Basic usage 2.1 Input data 2.2 Clustering for expression matrix 2.3 Line plot 2.4 Heatmap plot 2.5 Sample group and order 2.6 Multiple sample annotation 2.7 And line trend anntation 2.8 Multiple group line plot", " Chapter 2 Basic usage Here we show a detailed documentation usage about ClusterGVis. 2.1 Input data For bulk-RNA sequencing data, a normalized matrix or data frame(tpm/fpkm/rpkm/rpm/) containing gene expressions can be accepted. Please make sure the rownames of expression matrix are gene names. Here we load an example data which is from Protein Expression Landscape of Mouse Embryos during Pre-implantation Development. First we load the example data: library(ClusterGVis) # load data data(exps) # check head(exps,3) # zygote t2.cell t4.cell t8.cell tmorula blastocyst # Oog4 1.3132282 1.237078 1.325978 1.262073 0.6549312 0.2067114 # Psmd9 1.0917337 1.315989 1.174417 1.064756 0.8685598 0.4845448 # Sephs2 0.9859232 1.201026 1.123076 1.084673 0.8878931 0.7174088 2.2 Clustering for expression matrix It is a problem to define a suitable cluster numbers, here we supply the total within sum square value for different cluster numbers to help you to choose a suitable value. Besides you can re-define the cluster numbers after checking the expression distribution heatmap results: # check optimal cluster numbers getClusters(exp = exps) The kmeans, mfuzz and TCseq methods can be choosen to cluster data. mfuzz and TCseq are suitable for time course sequencing data to detect genes with consensus trend which are both applied with fuzzy cmeans clustering methods. Users can choose which one you like. # using mfuzz for clustering cm &lt;- clusterData(exp = exps, cluster.method = &quot;mfuzz&quot;, cluster.num = 8) # using TCseq for clustering ct &lt;- clusterData(exp = exps, cluster.method = &quot;TCseq&quot;, cluster.num = 8) # using kemans for clustering ck &lt;- clusterData(exp = exps, cluster.method = &quot;kmeans&quot;, cluster.num = 8) The clusterData function returns a list of results containing detailed clustering information for each gene. The wide.res is a more easily interpretable data frame that includes scaled gene expression values and cluster assignments for each gene. Complementing this, the long.res is a long-format data frame derived from wide.res, offering an alternative view of the same information: str(cm) # List of 5 # $ wide.res:&#39;data.frame&#39;: 3767 obs. of 9 variables: # ..$ gene : chr [1:3767] &quot;0610037L13Rik&quot; &quot;1110020G09Rik&quot; &quot;1110065P20Rik&quot; &quot;2010106G01Rik&quot; ... # ..$ zygote : num [1:3767] 0.255 -1.193 0.477 0.537 -1.395 ... # ..$ t2.cell : num [1:3767] 0.608 0.347 0.121 0.15 0.387 ... # ..$ t4.cell : num [1:3767] 0.708 0.113 -0.114 0.588 0.516 ... # ..$ t8.cell : num [1:3767] 0.589 1.418 1.272 0.888 1.383 ... # ..$ tmorula : num [1:3767] -0.2467 0.4319 0.0123 -0.3015 -0.8505 ... # ..$ blastocyst: num [1:3767] -1.9124 -1.1167 -1.7682 -1.8611 -0.0408 ... # ..$ cluster : num [1:3767] 1 1 1 1 1 1 1 1 1 1 ... # ..$ membership: num [1:3767] 0.765 0.437 0.581 0.66 0.206 ... # $ long.res:&#39;data.frame&#39;: 22602 obs. of 6 variables: # ..$ cluster : num [1:22602] 1 1 1 1 1 1 1 1 1 1 ... # ..$ gene : chr [1:22602] &quot;0610037L13Rik&quot; &quot;1110020G09Rik&quot; &quot;1110065P20Rik&quot; &quot;2010106G01Rik&quot; ... # ..$ membership : num [1:22602] 0.765 0.437 0.581 0.66 0.206 ... # ..$ cell_type : Factor w/ 6 levels &quot;zygote&quot;,&quot;t2.cell&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:22602] 0.255 -1.193 0.477 0.537 -1.395 ... # ..$ cluster_name: Factor w/ 8 levels &quot;cluster 1 (381)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;mfuzz&quot; # $ geneMode: chr &quot;none&quot; # $ geneType: chr &quot;none&quot; str(ck) # List of 5 # $ wide.res:&#39;data.frame&#39;: 3767 obs. of 8 variables: # ..$ zygote : num [1:3767] -1.189 -0.993 -1.095 -0.772 -0.683 ... # ..$ t2.cell : num [1:3767] 1.177 0.936 1.027 1.075 1.11 ... # ..$ t4.cell : num [1:3767] 0.126 0.561 0.484 0.397 0.337 ... # ..$ t8.cell : num [1:3767] 0.1831 0.2203 0.0516 -0.1314 -0.0698 ... # ..$ tmorula : num [1:3767] -1.17 -1.48 -1.33 -1.49 -1.56 ... # ..$ blastocyst: num [1:3767] 0.878 0.758 0.861 0.923 0.865 ... # ..$ gene : chr [1:3767] &quot;Pdlim1&quot; &quot;Zp3&quot; &quot;Crk&quot; &quot;Ndufaf4&quot; ... # ..$ cluster : num [1:3767] 1 1 1 1 1 1 1 1 1 1 ... # $ long.res:&#39;data.frame&#39;: 22602 obs. of 5 variables: # ..$ cluster : num [1:22602] 1 1 1 1 1 1 1 1 1 1 ... # ..$ gene : chr [1:22602] &quot;Pdlim1&quot; &quot;Zp3&quot; &quot;Crk&quot; &quot;Ndufaf4&quot; ... # ..$ cell_type : Factor w/ 6 levels &quot;zygote&quot;,&quot;t2.cell&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:22602] -1.189 -0.993 -1.095 -0.772 -0.683 ... # ..$ cluster_name: Factor w/ 8 levels &quot;cluster 1 (134)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;kmeans&quot; # $ geneMode: chr &quot;none&quot; # $ geneType: chr &quot;none&quot; 2.3 Line plot visCluster accepts results from clusterData and do visualization with line plot: # plot line only visCluster(object = cm, plot.type = &quot;line&quot;) Change linecolor: # change color visCluster(object = cm, plot.type = &quot;line&quot;, ms.col = c(&quot;green&quot;,&quot;orange&quot;,&quot;red&quot;)) Remove the middle line: # remove meadian line visCluster(object = cm, plot.type = &quot;line&quot;, ms.col = c(&quot;green&quot;,&quot;orange&quot;,&quot;red&quot;), add.mline = FALSE) There is no membership information if you choose kmeans method: # plot line only with kmeans method visCluster(object = ck, plot.type = &quot;line&quot;) 2.4 Heatmap plot visCluster can create a comprehensive heatmap plot to show detailed cluster results. Here we make a heatmap plot: # plot heatmap only visCluster(object = ck, plot.type = &quot;heatmap&quot;) Other paramters can be passed with ComplexHeatmap: # supply other aruguments passed by Heatmap function visCluster(object = ck, plot.type = &quot;heatmap&quot;, column_names_rot = 45) Change the annotaion bar colors on the right side: # change anno bar color visCluster(object = ck, plot.type = &quot;heatmap&quot;, column_names_rot = 45, ctAnno.col = ggsci::pal_npg()(8)) Mark your interested gene names in heatmap: # add gene name markGenes = rownames(exps)[sample(1:nrow(exps),30,replace = F)] pdf(&#39;addgene.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = ck, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes) dev.off() 2.5 Sample group and order Add groups for samples: # assign groups pdf(&#39;htcolg.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = cm, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes, show_row_dend = F, sample.group = rep(c(&quot;group1&quot;,&quot;group2&quot;,&quot;group3&quot;),each = 2)) dev.off() Change sample orders: # change sample order pdf(&#39;htsr.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = cm, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes, show_row_dend = F, sample.order = rev(colnames(exps))) dev.off() 2.6 Multiple sample annotation Multiple group annotations for samples can be passed with ComplexHeatmap grammers. Here we show an example: # group info mg1 = rep(c(&quot;D1&quot;,&quot;D2&quot;), each = 3) names(mg1) &lt;- c(&quot;zygote&quot;,&quot;t2.cell&quot;,&quot;t4.cell&quot;,&quot;t8.cell&quot;,&quot;tmorula&quot;,&quot;blastocyst&quot;) mg2 = rep(c(&quot;E1&quot;, &quot;E2&quot;, &quot;E3&quot;), each = 2) names(mg2) &lt;- c(&quot;zygote&quot;,&quot;t2.cell&quot;,&quot;t4.cell&quot;,&quot;t8.cell&quot;,&quot;tmorula&quot;,&quot;blastocyst&quot;) # TOP annotations HeatmapAnnotation &lt;- ComplexHeatmap::HeatmapAnnotation(mg1 = mg1, mg2 = mg2, col = list(mg1 = c(&quot;D1&quot; = &quot;#C147E9&quot;,&quot;D2&quot; = &quot;#FF7000&quot;), mg2 = c(&quot;E1&quot; = &quot;#54B435&quot;,&quot;E2&quot; = &quot;#31C6D4&quot;,&quot;E3&quot; = &quot;#D9CB50&quot;)), gp = grid::gpar(col = &quot;white&quot;)) pdf(&#39;htcolmg.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = cm, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes, show_row_dend = F, ht.col = list(col_range = c(-2, 0, 2),col_color = c(&quot;#A555EC&quot;,&quot;#EEEEEE&quot;,&quot;#FF597B&quot;)), HeatmapAnnotation = HeatmapAnnotation) dev.off() Split the columns: pdf(&#39;htcolmgs1.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = cm, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes, show_row_dend = F, ht.col = list(col_range = c(-2, 0, 2),col_color = c(&quot;#A555EC&quot;,&quot;#EEEEEE&quot;,&quot;#FF597B&quot;)), HeatmapAnnotation = HeatmapAnnotation, column.split = rep(c(1,2,3),each = 2)) dev.off() 2.7 And line trend anntation Add a line annotation for each sub-cluster to show expression tendency(Please note: use pdf function to save the plot and open it to view, otherwise the annotation panels will not match to the main heatmap if you use zoom option to view the plot in Rstudio): # add line annotation pdf(&#39;testHT.pdf&#39;,height = 10,width = 6) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45) dev.off() Add boxplot: # add boxplot pdf(&#39;testbx.pdf&#39;,height = 10,width = 6) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, add.box = T) dev.off() Remove line plot and change boxplot color: # remove line and change box fill color pdf(&#39;testbxcol.pdf&#39;,height = 10,width = 6) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, add.box = T, add.line = F, boxcol = ggsci::pal_npg()(8)) dev.off() Add points: # add point pdf(&#39;testbxcolP.pdf&#39;,height = 10,width = 6) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, add.box = T, add.line = F, boxcol = ggsci::pal_npg()(8), add.point = T) dev.off() 2.8 Multiple group line plot Sometimes maybe there is a need to show line annotation across different conditions. This is can be achieved by mulGroup parameter: "],["enrichment-anaysis.html", "Chapter 3 Enrichment anaysis 3.1 Enrichment for non-model organisms 3.2 Own enrichment data 3.3 Batch enrichment analysis 3.4 Add annotation for specific groups 3.5 Add barplot for enrichment annotation 3.6 Add KEGG annotation", " Chapter 3 Enrichment anaysis To explore important biological significance or related biological pathway for each cluster, you can supply your own enrichment results with data frame format(two columns: cluster number and term name) or use enrichCluster to do batch enrichment analysis for each cluster. 3.1 Enrichment for non-model organisms Adjust id.trans/toType/readable parameters if you have created your own orgdb object: enrich &lt;- enrichCluster(object = cm, OrgDb = org.myorg.eg.db, type = &quot;BP&quot;, id.trans = F, toType = &quot;GID&quot;, readable = F, pvalueCutoff = 0.5, topn = 5) You can set TERM2GENE and TERM2NAME if you have data frame with pathway-gene and pathway-pathwat name data: enrich &lt;- enrichCluster(object = cm, type = &quot;ownSet&quot;, id.trans = F, TERM2GENE = ko2gene, TERM2NAME = ko2name, pvalueCutoff = 0.5, topn = 5) 3.2 Own enrichment data Here we load an example enrichment data frame: # load term info data(&quot;termanno&quot;) # check head(termanno,4) # id term # 1 C1 developmental process # 2 C1 anatomical structure development # 3 C1 multicellular organism development # 4 C2 system development Add enrichment results annotation beside the heatmap for each cluster: # anno with GO terms pdf(&#39;testHTterm.pdf&#39;,height = 10,width = 10) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, annoTerm.data = termanno) dev.off() Put the line anntation to the left: # change the line annotation side pdf(&#39;testHTtermCmls.pdf&#39;,height = 10,width = 10) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, annoTerm.data = termanno, line.side = &quot;left&quot;) dev.off() Remove the dend tree: # remove tree pdf(&#39;testHTtermCmlsrt.pdf&#39;,height = 10,width = 10) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, annoTerm.data = termanno, line.side = &quot;left&quot;, show_row_dend = F) dev.off() You can supply enrichment data with pvalue column to show in plot, the pathway label size reflects the relative pvalue: # load GO term data data(&quot;termanno2&quot;) # check head(termanno2,3) # id term pval # 1 C1 developmental process 3.17e-69 # 2 C1 anatomical structure development 1.44e-68 # 3 C1 multicellular organism development 1.36e-66 # adjust term colors and text size pdf(&#39;termlfts.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = termanno2, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 3), go.size = &quot;pval&quot;) dev.off() 3.3 Batch enrichment analysis enrichCluster can do batch enrichment analysis for each cluster using clusterpfofiler package. It will extract top 5 pathway terms(ordered by pvalue). library(org.Mm.eg.db) # enrich for clusters enrich &lt;- enrichCluster(object = ck, OrgDb = org.Mm.eg.db, type = &quot;BP&quot;, pvalueCutoff = 0.05, topn = 5, seed = 5201314) # check head(enrich,3) # group Description pvalue ratio # GO:0009150 C1 purine ribonucleotide metabolic process 4.287676e-08 12 # GO:0009259...2 C1 ribonucleotide metabolic process 6.782860e-08 12 # GO:0019693...3 C1 ribose phosphate metabolic process 9.382227e-08 12 # plot pdf(&#39;termenrich.pdf&#39;,height = 10,width = 11,onefile = F) visCluster(object = ck, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), go.size = &quot;pval&quot;) dev.off() 3.4 Add annotation for specific groups You can define subgroup.anno to highlight specific groups you want. # annotation for specific clusters pdf(&#39;subc.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), go.size = &quot;pval&quot;, subgroup.anno = c(&quot;C4&quot;,&quot;C6&quot;,&quot;C8&quot;)) dev.off() 3.5 Add barplot for enrichment annotation The barplot height will use the enrichment data frame last column to plot: pdf(&#39;bar.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), go.size = &quot;pval&quot;, add.bar = T) dev.off() Match the enrichment annotation right side and barplot annotation left side: # change side pdf(&#39;barc.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), add.bar = T, go.size = &quot;pval&quot;, annoTerm.mside = &quot;left&quot;) dev.off() Adjust cluster label position in barplot: # change barplot cluster label position pdf(&#39;barp.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), go.size = &quot;pval&quot;, add.bar = T, textbar.pos = c(0.8,0.2)) dev.off() Add annotation for specific cluster: # sub-clusters with barplot pdf(&#39;subcb.pdf&#39;,height = 10,width = 12,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, genes.gp = c(&#39;italic&#39;,fontsize = 12,col = &quot;black&quot;), annoTerm.data = enrich, line.side = &quot;left&quot;, go.col = rep(ggsci::pal_d3()(8),each = 5), go.size = &quot;pval&quot;, add.bar = T, textbar.pos = c(0.8,0.2), subgroup.anno = c(&quot;C4&quot;,&quot;C6&quot;,&quot;C8&quot;)) dev.off() 3.6 Add KEGG annotation Sometimes you may want to perform both GO and KEGG enrichment results, here is an example: # using mfuzz for clustering # mfuzz cm &lt;- clusterData(exp = exps, cluster.method = &quot;mfuzz&quot;, cluster.num = 6) # GO enrich for clusters enrich.go &lt;- enrichCluster(object = cm, OrgDb = org.Mm.eg.db, type = &quot;BP&quot;, pvalueCutoff = 0.05, topn = 5, seed = 5201314) # check head(enrich.go,3) # group Description pvalue ratio # GO:0044282 C1 small molecule catabolic process 3.376035e-32 10.683761 # GO:0046395 C1 carboxylic acid catabolic process 8.123713e-20 6.623932 # GO:0016054 C1 organic acid catabolic process 1.057149e-19 6.623932 # KEGG enrich for clusters enrich.kegg &lt;- enrichCluster(object = cm, OrgDb = org.Mm.eg.db, type = &quot;KEGG&quot;, organism = &quot;mmu&quot;, pvalueCutoff = 0.05, topn = 5, seed = 5201314) # check head(enrich.kegg,3) # group Description pvalue ratio # mmu04146 C1 Peroxisome - Mus musculus (house mouse) 1.087835e-16 8.880309 # mmu01200...2 C1 Carbon metabolism - Mus musculus (house mouse) 3.447857e-14 9.266409 # mmu00620 C1 Pyruvate metabolism - Mus musculus (house mouse) 1.466749e-10 5.019305 # add gene name markGenes = rownames(exps)[sample(1:nrow(exps),30,replace = F)] # plot pdf(&#39;gokegg.pdf&#39;,height = 10,width = 16,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = enrich.go, go.col = rep(jjAnno::useMyCol(&quot;calm&quot;,n = 6),each = 5), annoKegg.data = enrich.kegg, kegg.col = rep(jjAnno::useMyCol(&quot;stallion&quot;,n = 6),each = 5), line.side = &quot;left&quot;, sample.group = rep(c(&quot;sample1&quot;,&quot;sample2&quot;,&quot;sample3&quot;),each = 2)) dev.off() Format the annotation panel: # change textbox style pdf(&#39;gokeggsq.pdf&#39;,height = 12,width = 18,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = enrich.go, go.col = rep(jjAnno::useMyCol(&quot;calm&quot;,n = 6),each = 5), by.go = &quot;anno_block&quot;, annoKegg.data = enrich.kegg, kegg.col = rep(jjAnno::useMyCol(&quot;stallion&quot;,n = 6),each = 5), by.kegg = &quot;anno_block&quot;, word_wrap = F,add_new_line = F, line.side = &quot;left&quot;, sample.group = rep(c(&quot;sample1&quot;,&quot;sample2&quot;,&quot;sample3&quot;),each = 2)) dev.off() Add both barplot for GO and KEGG: # change style pdf(&#39;gokeggbarNew.pdf&#39;,height = 10,width = 20,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = enrich.go, go.col = rep(jjAnno::useMyCol(&quot;calm&quot;,n = 6),each = 5), add.bar = T, by.go = &quot;anno_block&quot;, annoKegg.data = enrich.kegg, kegg.col = rep(jjAnno::useMyCol(&quot;stallion&quot;,n = 6),each = 5), add.kegg.bar = T, by.kegg = &quot;anno_block&quot;, word_wrap = F,add_new_line = F, line.side = &quot;left&quot;, sample.group = rep(c(&quot;sample1&quot;,&quot;sample2&quot;,&quot;sample3&quot;),each = 2)) dev.off() The another solution is to combine the GO and KEGG resluts and plot in a single panel with different colors to distinguish them: # combine go and kegg data library(dplyr) all &lt;- rbind(enrich.go %&gt;% group_by(group) %&gt;% slice_head(n = 2) %&gt;% mutate(Description = paste(&quot;BP: &quot;,Description,sep = &quot;&quot;)), enrich.kegg %&gt;% group_by(group) %&gt;% slice_head(n = 2) %&gt;% mutate(Description = paste(&quot;KEGG: &quot;,Description,sep = &quot;&quot;))) %&gt;% arrange(group) # plot pdf(&#39;gokeggcomb.pdf&#39;,height = 10,width = 16,onefile = F) visCluster(object = cm, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = all, go.col = c(rep(jjAnno::useMyCol(&quot;calm&quot;,n = 6),each = 2), rep(jjAnno::useMyCol(&quot;circus&quot;,n = 6),each = 2)), line.side = &quot;left&quot;, word_wrap = F,add_new_line = F, by.go = &quot;anno_block&quot;, add.bar = T, sample.group = rep(c(&quot;sample1&quot;,&quot;sample2&quot;,&quot;sample3&quot;),each = 2)) dev.off() "],["parse-wgcna-output.html", "Chapter 4 Parse WGCNA output", " Chapter 4 Parse WGCNA output WGCNA stands for Weighted Gene Co-expression Network Analysis. Its a widely used bioinformatics method for analyzing high-throughput gene expression data. It will also cluster the expression data into different clusters. ClusterGvis also can parse the WGCNA output results and analysis biological significance for each cluster. For detailed WGCNA tutorial, you can visit https://edo98811.github.io/WGCNA_official_documentation/. ClusterGvis accepts an object from one-step network construction and module detection Related example code(not run): net = blockwiseModules(datExpr, power = 6, TOMType = &quot;unsigned&quot;, minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = &quot;femaleMouseTOM&quot;, verbose = 3) Pass to clusterData to obtain plotting data. Note that the exp provided here should be the expression matrix after WGCNA filtering. Its a transposed matrix, corresponding to the datExpr in the WGCNA example code: datExpr0 = as.data.frame(t(femData[, -c(1:8)])); names(datExpr0) = femData$substanceBXH; rownames(datExpr0) = names(femData)[-c(1:8)]; gsg = goodSamplesGenes(datExpr0, verbose = 3); gsg$allOK if (!gsg$allOK) { # Optionally, print the gene and sample names that were removed: if (sum(!gsg$goodGenes)&gt;0) printFlush(paste(&quot;Removing genes:&quot;, paste(names(datExpr0)[!gsg$goodGenes], collapse = &quot;, &quot;))); if (sum(!gsg$goodSamples)&gt;0) printFlush(paste(&quot;Removing samples:&quot;, paste(rownames(datExpr0)[!gsg$goodSamples], collapse = &quot;, &quot;))); # Remove the offending genes and samples from the data: datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes] } sampleTree = hclust(dist(datExpr0), method = &quot;average&quot;); # Plot the sample tree: Open a graphic output window of size 12 by 9 inches # The user should change the dimensions if the window is too large or too small. sizeGrWindow(12,9) #pdf(file = &quot;Plots/sampleClustering.pdf&quot;, width = 12, height = 9); par(cex = 0.6); par(mar = c(0,4,2,0)) plot(sampleTree, main = &quot;Sample clustering to detect outliers&quot;, sub=&quot;&quot;, xlab=&quot;&quot;, cex.lab = 1.5, cex.axis = 1.5, cex.main = 2) # Plot a line to show the cut abline(h = 15, col = &quot;red&quot;); # Determine cluster under the line clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10) table(clust) # clust 1 contains the samples we want to keep. keepSamples = (clust==1) datExpr = datExpr0[keepSamples, ] We load a test WGCNA object which ran with WGCNA using exps data: data(&quot;net&quot;) str(net) # List of 10 # $ colors : Named num [1:3767] 1 1 1 1 1 1 1 1 1 1 ... # ..- attr(*, &quot;names&quot;)= chr [1:3767] &quot;Oog4&quot; &quot;Psmd9&quot; &quot;Sephs2&quot; &quot;Nhlrc2&quot; ... # $ unmergedColors: Named num [1:3767] 1 1 1 1 1 1 1 1 1 1 ... # ..- attr(*, &quot;names&quot;)= chr [1:3767] &quot;Oog4&quot; &quot;Psmd9&quot; &quot;Sephs2&quot; &quot;Nhlrc2&quot; ... # $ MEs :&#39;data.frame&#39;: 6 obs. of 5 variables: # ..$ ME1: num [1:6] -0.225 -0.251 -0.236 -0.196 0.018 ... # ..$ ME2: num [1:6] 0.564 0.423 0.103 -0.113 -0.456 ... # ..$ ME3: num [1:6] 0.228 0.448 0.107 -0.281 -0.766 ... # ..$ ME4: num [1:6] 0.62653 -0.00404 -0.26899 -0.44759 -0.35935 ... # ..$ ME0: num [1:6] -0.497 0.461 -0.162 0.587 -0.411 ... # $ goodSamples : logi [1:6] TRUE TRUE TRUE TRUE TRUE TRUE # $ goodGenes : logi [1:3767] TRUE TRUE TRUE TRUE TRUE TRUE ... # $ dendrograms :List of 1 # ..$ :List of 7 # .. ..$ merge : int [1:3766, 1:2] -1089 -1087 -1091 -377 -1092 -1104 -1054 -1095 -1088 -1064 ... # .. ..$ height : num [1:3766] 0.19 0.19 0.19 0.19 0.19 ... # .. ..$ order : int [1:3767] 2953 3637 3065 3270 3529 3660 3018 3600 3558 3665 ... # .. ..$ labels : NULL # .. ..$ method : chr &quot;average&quot; # .. ..$ call : language fastcluster::hclust(d = as.dist(dissTom), method = &quot;average&quot;) # .. ..$ dist.method: NULL # .. ..- attr(*, &quot;class&quot;)= chr &quot;hclust&quot; # $ TOMFiles : chr &quot;femaleMouseTOM-block.1.RData&quot; # $ blockGenes :List of 1 # ..$ : int [1:3767] 1 2 3 4 5 6 7 8 9 10 ... # $ blocks : num [1:3767] 1 1 1 1 1 1 1 1 1 1 ... # $ MEsOK : logi TRUE Parse the object: expt &lt;- t(exps) # get data cw &lt;- clusterData(exp = expt, cluster.method = &quot;wgcna&quot;, object = net) str(cw) # List of 3 # $ wide.res:&#39;data.frame&#39;: 3767 obs. of 9 variables: # ..$ zygote : num [1:3767] 0.6747 0.3143 -0.0799 -0.1841 0.7904 ... # ..$ t2.cell : num [1:3767] 0.511 1.083 1.14 0.497 -0.247 ... # ..$ t4.cell : num [1:3767] 0.702 0.598 0.698 0.794 0.668 ... # ..$ t8.cell : num [1:3767] 0.565 0.222 0.48 0.985 0.826 ... # ..$ tmorula : num [1:3767] -0.743 -0.45 -0.636 -0.363 -0.273 ... # ..$ blastocyst: num [1:3767] -1.71 -1.77 -1.6 -1.73 -1.76 ... # ..$ gene : chr [1:3767] &quot;Oog4&quot; &quot;Psmd9&quot; &quot;Sephs2&quot; &quot;Nhlrc2&quot; ... # ..$ cluster : num [1:3767] 2 2 2 2 2 2 2 2 2 2 ... # ..$ modulecol : chr [1:3767] &quot;turquoise&quot; &quot;turquoise&quot; &quot;turquoise&quot; &quot;turquoise&quot; ... # $ long.res:&#39;data.frame&#39;: 22602 obs. of 6 variables: # ..$ cluster : num [1:22602] 2 2 2 2 2 2 2 2 2 2 ... # ..$ gene : chr [1:22602] &quot;Oog4&quot; &quot;Psmd9&quot; &quot;Sephs2&quot; &quot;Nhlrc2&quot; ... # ..$ modulecol : chr [1:22602] &quot;turquoise&quot; &quot;turquoise&quot; &quot;turquoise&quot; &quot;turquoise&quot; ... # ..$ cell_type : Factor w/ 6 levels &quot;zygote&quot;,&quot;t2.cell&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:22602] 0.6747 0.3143 -0.0799 -0.1841 0.7904 ... # ..$ cluster_name: chr [1:22602] &quot;cluster 2 (2574 turquoise)&quot; &quot;cluster 2 (2574 turquoise)&quot; &quot;cluster 2 (2574 turquoise)&quot; &quot;cluster 2 (2574 turquoise)&quot; ... # $ type : chr &quot;wgcna&quot; Now we can visualize the parsed data by using ClusterGvis: # add gene name markGenes = rownames(exps)[sample(1:nrow(exps),30,replace = F)] # plot visCluster(object = cw, plot.type = &quot;line&quot;, ncol = 3) Heatmap: # heatmap pdf(&#39;netht.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = cw, plot.type = &quot;heatmap&quot;, markGenes = markGenes) dev.off() Add line annotation: # heatmap + line pdf(&#39;nethtl.pdf&#39;,height = 10,width = 8,onefile = F) visCluster(object = cw, plot.type = &quot;both&quot;, markGenes = markGenes) dev.off() "],["parse-single-cell-data.html", "Chapter 5 Parse single cell data", " Chapter 5 Parse single cell data Seurat is a popular R package used for single-cell RNA sequencing (scRNA-seq) data analysis. It provides tools for quality control, analysis, and exploration of single-cell RNA-seq data. ClusterGvis also can visualize clustered data(different celltype clusters) with Seurat object. We first find marker genes using Seurat::FindAllMarkers: library(SeuratData) library(Seurat) data(&quot;pbmc3k.final&quot;) pbmc &lt;- UpdateSeuratObject(object = pbmc3k.final) # find markers for every cluster compared to all remaining cells # report only the positive ones pbmc.markers.all &lt;- Seurat::FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) # get top 10 genes pbmc.markers &lt;- pbmc.markers.all %&gt;% dplyr::group_by(cluster) %&gt;% dplyr::top_n(n = 20, wt = avg_log2FC) # check head(pbmc.markers) # # A tibble: 6 × 7 # # Groups: cluster [1] # p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene # &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; # 1 1.96e-107 1.17 0.901 0.594 2.69e-103 Naive CD4 T LDHB # 2 1.61e- 82 2.35 0.436 0.11 2.20e- 78 Naive CD4 T CCR7 # 3 4.20e- 77 1.08 0.838 0.406 5.76e- 73 Naive CD4 T CD3D # 4 2.32e- 54 1.04 0.726 0.399 3.18e- 50 Naive CD4 T CD3E # 5 3.19e- 50 1.27 0.628 0.358 4.38e- 46 Naive CD4 T NOSIP # 6 3.32e- 49 2.09 0.336 0.104 4.56e- 45 Naive CD4 T LEF1 prepareDataFromscRNA requires your Seurat object and differential expression results as input. If the showAverage parameter is set to TRUE, it means the function will calculate and plot the average expression for genes in cells of the same subgroup. If FALSE, it will plot data for all individual cells. By default, the function uses the data slot from the RNA assay in the Seurat object: # prepare data from seurat object st.data &lt;- prepareDataFromscRNA(object = pbmc, diffData = pbmc.markers, showAverage = TRUE) # check str(st.data) # List of 5 # $ wide.res:&#39;data.frame&#39;: 177 obs. of 11 variables: # ..$ gene : chr [1:177] &quot;LDHB&quot; &quot;CCR7&quot; &quot;CD3D&quot; &quot;CD3E&quot; ... # ..$ Naive CD4 T : num [1:177] 1.66 2.34 1.1 1.19 1.82 ... # ..$ Memory CD4 T: num [1:177] 1.654 0.632 1.204 1.335 1.453 ... # ..$ CD14+ Mono : num [1:177] -0.639 -0.575 -0.649 -0.864 -0.526 ... # ..$ B : num [1:177] -0.574 0.414 -0.671 -0.822 -0.759 ... # ..$ CD8 T : num [1:177] 0.3047 -0.5134 1.6493 1.2945 0.0369 ... # ..$ FCGR3A+ Mono: num [1:177] -0.886 -0.536 -0.681 -0.845 -0.144 ... # ..$ NK : num [1:177] -0.26 -0.5575 -0.538 0.0622 -0.1026 ... # ..$ DC : num [1:177] -0.521 -0.53 -0.685 -0.865 -0.63 ... # ..$ Platelet : num [1:177] -0.74 -0.679 -0.728 -0.488 -1.143 ... # ..$ cluster : chr [1:177] &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... # $ long.res:&#39;data.frame&#39;: 1593 obs. of 5 variables: # ..$ cluster : chr [1:1593] &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... # ..$ gene : chr [1:1593] &quot;LDHB&quot; &quot;CCR7&quot; &quot;CD3D&quot; &quot;CD3E&quot; ... # ..$ cell_type : Factor w/ 9 levels &quot;Naive CD4 T&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:1593] 1.66 2.34 1.1 1.19 1.82 ... # ..$ cluster_name: Factor w/ 9 levels &quot;cluster 1 (20)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;scRNAdata&quot; # $ geneMode: chr &quot;average&quot; # $ geneType: chr &quot;unique|_&quot; Enrichment anaysis for each celltype: library(org.Hs.eg.db) # enrich for clusters enrich &lt;- enrichCluster(object = st.data, OrgDb = org.Hs.eg.db, type = &quot;BP&quot;, organism = &quot;hsa&quot;, pvalueCutoff = 0.5, topn = 5, seed = 5201314) # check head(enrich) # group Description pvalue ratio # GO:0030098 C1 lymphocyte differentiation 4.255042e-09 42.10526 # GO:1903131...2 C1 mononuclear cell differentiation 1.034991e-08 42.10526 # GO:0030217 C1 T cell differentiation 1.275815e-08 36.84211 # GO:0050863...4 C1 regulation of T cell activation 5.354207e-08 36.84211 # GO:0022407 C1 regulation of cell-cell adhesion 3.163499e-07 36.84211 # GO:0002260 C2 lymphocyte homeostasis 4.246017e-07 25.00000 Line plot: # add gene name markGenes = unique(pbmc.markers$gene)[sample(1:length(unique(pbmc.markers$gene)),40, replace = F)] # line plot visCluster(object = st.data, plot.type = &quot;line&quot;) Order the cluster: # heatmap plot pdf(&#39;sc1.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = st.data, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = markGenes, cluster.order = c(1:9)) dev.off() Add enrichment annotation: # add bar plot pdf(&#39;sc2.pdf&#39;,height = 10,width = 14,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = enrich, line.side = &quot;left&quot;, cluster.order = c(1:9), go.col = rep(jjAnno::useMyCol(&quot;stallion&quot;,n = 9),each = 5), add.bar = T) dev.off() During differential expression analysis, there may be multiple identical genes that show differential expression across several subgroups simultaneously. By default, these duplicate genes will be deduplicated. This might result in fewer genes available for enrichment analysis. However, you can use the parameter keep.uniqGene=FALSE to retain duplicate genes: # retain duplicate diff gene in multiple clusters st.data &lt;- prepareDataFromscRNA(object = pbmc, diffData = pbmc.markers, showAverage = TRUE, keep.uniqGene = FALSE, sep = &quot;_&quot;) # check df &lt;- st.data$wide.res Line plot without de-duplicate genes: # line plot visCluster(object = st.data, plot.type = &quot;line&quot;) Lets see the duplicate genes in heatmap: # heatmap plot pdf(&#39;sc3.pdf&#39;,height = 10,width = 6,onefile = F) visCluster(object = st.data, plot.type = &quot;heatmap&quot;, column_names_rot = 45, markGenes = c(&quot;CD27&quot;,&quot;CD27_1&quot;), cluster.order = c(1:9)) dev.off() Now lets show all cells expression: # no average cells pbmc.markers1 &lt;- pbmc.markers.all %&gt;% dplyr::group_by(cluster) %&gt;% dplyr::top_n(n = 6, wt = avg_log2FC) # retain duplicate diff gene in multiple clusters st.data &lt;- prepareDataFromscRNA(object = pbmc, diffData = pbmc.markers1, showAverage = FALSE) # check str(st.data) # List of 5 # $ wide.res:&#39;data.frame&#39;: 54 obs. of 2640 variables: # ..$ gene : chr [1:54] &quot;MAL&quot; &quot;LEF1&quot; &quot;TCF7&quot; &quot;PRKCQ-AS1&quot; ... # ..$ AAACGCTGTAGCCA|Naive CD4 T : num [1:54] -0.381 -0.434 2.272 -0.439 -0.479 ... # ..$ AAACTTGATCCAGA|Naive CD4 T : num [1:54] -0.381 -0.434 1.585 -0.439 2.914 ... # ..$ AAAGAGACGAGATA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 1.927 -0.479 ... # ..$ AAAGAGACGGACTT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AAAGAGACGGCATT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 3.332 -0.479 ... # ..$ AAAGTTTGTAGAGA|Naive CD4 T : num [1:54] -0.381 -0.434 2.44 -0.439 2.527 ... # ..$ AAATCAACACCAGT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 3.486 -0.479 ... # ..$ AAATCAACCAGGAG|Naive CD4 T : num [1:54] 2.01 1.78 1.42 1.76 2.25 ... # ..$ AAATCAACGGAAGC|Naive CD4 T : num [1:54] -0.381 2.353 1.211 1.518 -0.479 ... # ..$ AAATCCCTCCACAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AAATTCGAAGGTTC|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 1.521 ... # ..$ AAATTCGAGGAGTG|Naive CD4 T : num [1:54] -0.381 1.713 -0.534 -0.439 1.436 ... # ..$ AACAAACTCATTTC|Naive CD4 T : num [1:54] 2.32 2.08 2.45 2.05 1.76 ... # ..$ AACAAACTTTCGTT|Naive CD4 T : num [1:54] 2.058 1.829 -0.534 -0.439 1.54 ... # ..$ AACAATACGACGAG|Naive CD4 T : num [1:54] -0.381 2.118 1.718 -0.439 2.581 ... # ..$ AACACGTGGAAAGT|Naive CD4 T : num [1:54] -0.381 -0.434 2.237 -0.439 -0.479 ... # ..$ AACACGTGGCTACA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 1.817 -0.479 ... # ..$ AACCCAGATCGCTC|Naive CD4 T : num [1:54] 2.231 -0.434 -0.534 -0.439 -0.479 ... # ..$ AACCGATGCTCCCA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 1.985 1.705 ... # ..$ AACCTACTGTGTTG|Naive CD4 T : num [1:54] 2.064 -0.434 1.469 1.807 2.302 ... # ..$ AACCTTACGAGACG|Naive CD4 T : num [1:54] -0.381 2.638 1.433 1.767 1.509 ... # ..$ AACCTTTGGACGGA|Naive CD4 T : num [1:54] -0.381 -0.434 1.733 -0.439 -0.479 ... # ..$ AACGCATGACCCAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AACGCATGCCTTCG|Naive CD4 T : num [1:54] -0.381 1.756 -0.534 -0.439 1.475 ... # ..$ AACGCATGTACTTC|Naive CD4 T : num [1:54] -0.381 -0.434 1.383 -0.439 -0.479 ... # ..$ AACGTGTGTCCAAG|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.371 -0.479 ... # ..$ AACTACCTTAGAGA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 3.038 ... # ..$ AACTTGCTGGGACA|Naive CD4 T : num [1:54] -0.381 2.265 1.849 -0.439 -0.479 ... # ..$ AAGAACGAGTGTTG|Naive CD4 T : num [1:54] 3.747 -0.434 -0.534 -0.439 -0.479 ... # ..$ AAGACAGAGGATCT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 1.974 -0.479 ... # ..$ AAGATTACAACCTG|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.08 -0.479 ... # ..$ AAGCACTGCATACG|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AAGCCAACGTGTTG|Naive CD4 T : num [1:54] -0.381 -0.434 1.436 -0.439 1.512 ... # ..$ AAGCCATGCGTGAT|Naive CD4 T : num [1:54] -0.381 2.114 1.715 -0.439 3.064 ... # ..$ AAGCCATGTCTCGC|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AAGCGACTGTGTCA|Naive CD4 T : num [1:54] -0.381 2.482 2.04 1.631 2.123 ... # ..$ AAGCGTACGTCTTT|Naive CD4 T : num [1:54] -0.381 2.151 1.748 -0.439 2.614 ... # ..$ AAGGTCTGCAGATC|Naive CD4 T : num [1:54] -0.381 -0.434 2.592 -0.439 2.681 ... # ..$ AAGTATACCGAACT|Naive CD4 T : num [1:54] -0.381 -0.434 1.999 -0.439 -0.479 ... # ..$ AAGTCCGACTTGTT|Naive CD4 T : num [1:54] -0.381 2.517 -0.534 -0.439 2.154 ... # ..$ AAGTCCGATAGAAG|Naive CD4 T : num [1:54] -0.381 1.576 -0.534 -0.439 -0.479 ... # ..$ AAGTCTCTAGTCGT|Naive CD4 T : num [1:54] -0.381 1.605 2.448 -0.439 -0.479 ... # ..$ AATAAGCTCGTTGA|Naive CD4 T : num [1:54] -0.381 3.358 2.013 -0.439 2.096 ... # ..$ AATCCTACCGGTAT|Naive CD4 T : num [1:54] 2.179 -0.434 -0.534 -0.439 -0.479 ... # ..$ AATCGGTGTGCTTT|Naive CD4 T : num [1:54] -0.381 2.245 -0.534 -0.439 3.55 ... # ..$ AATCTAGAATCGGT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ AATCTCACTCTAGG|Naive CD4 T : num [1:54] -0.381 2.093 1.697 -0.439 -0.479 ... # ..$ AATCTCTGAACAGA|Naive CD4 T : num [1:54] -0.381 2.073 2.451 2.908 1.758 ... # ..$ AATGGCTGTGAAGA|Naive CD4 T : num [1:54] -0.381 -0.434 1.699 2.066 -0.479 ... # ..$ AATGTAACGGTGGA|Naive CD4 T : num [1:54] 3.366 1.687 -0.534 -0.439 2.154 ... # ..$ AATTACGACTTCTA|Naive CD4 T : num [1:54] -0.381 -0.434 1.51 3.228 -0.479 ... # ..$ ACAAAGGAGGGTGA|Naive CD4 T : num [1:54] -0.381 2.169 1.763 -0.439 -0.479 ... # ..$ ACAAGAGACTTATC|Naive CD4 T : num [1:54] -0.381 -0.434 2.617 -0.439 -0.479 ... # ..$ ACAGGTACCCCACT|Naive CD4 T : num [1:54] 2.04 -0.434 1.449 -0.439 1.526 ... # ..$ ACAGTCGACCCAAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACAGTGTGGTCACA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACATGGTGAAGCCT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACATGGTGCGAGTT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.993 -0.479 ... # ..$ ACATTCTGGCATAC|Naive CD4 T : num [1:54] -0.381 1.763 1.405 -0.439 -0.479 ... # ..$ ACCAACGACATGCA|Naive CD4 T : num [1:54] -0.381 -0.434 1.713 -0.439 -0.479 ... # ..$ ACCACAGAAAGTAG|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACCACAGAGTTGGT|Naive CD4 T : num [1:54] -0.381 -0.434 1.403 2.563 -0.479 ... # ..$ ACCACCTGTGTGCA|Naive CD4 T : num [1:54] -0.381 2.85 -0.534 2.812 2.451 ... # ..$ ACCACGCTACAGCT|Naive CD4 T : num [1:54] 2.134 1.899 1.526 -0.439 2.366 ... # ..$ ACCACGCTGCGAGA|Naive CD4 T : num [1:54] -0.381 2.192 -0.534 -0.439 -0.479 ... # ..$ ACCACGCTGCTGTA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACCAGTGAGGGATG|Naive CD4 T : num [1:54] 2.177 2.8 -0.534 1.911 -0.479 ... # ..$ ACCATTACCTTCTA|Naive CD4 T : num [1:54] 1.77 1.56 1.23 1.54 1.3 ... # ..$ ACCATTTGTCATTC|Naive CD4 T : num [1:54] -0.381 2.419 -0.534 -0.439 2.066 ... # ..$ ACCCACTGGACAGG|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 2.817 ... # ..$ ACCCAGCTTGCTTT|Naive CD4 T : num [1:54] 2.151 -0.434 2.297 1.887 -0.479 ... # ..$ ACCCGTTGCTGCAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.057 1.771 ... # ..$ ACCTCCGATATGCG|Naive CD4 T : num [1:54] 2.583 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACCTCCGATGCTGA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACGAAGCTCTCCAC|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 3.327 -0.479 ... # ..$ ACGACCCTGATGAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.141 -0.479 ... # ..$ ACGACCCTTGACCA|Naive CD4 T : num [1:54] -0.381 -0.434 1.618 -0.439 -0.479 ... # ..$ ACGAGGGACGAACT|Naive CD4 T : num [1:54] 3.927 1.8 -0.534 1.772 -0.479 ... # ..$ ACGATTCTACGGGA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 2.416 -0.479 ... # ..$ ACGCCGGAAAGCCT|Naive CD4 T : num [1:54] -0.381 2.096 -0.534 -0.439 1.778 ... # ..$ ACGCTCACAGTACC|Naive CD4 T : num [1:54] 2.218 -0.434 1.594 -0.439 1.672 ... # ..$ ACGCTCACCCTTGC|Naive CD4 T : num [1:54] 3.277 -0.434 1.69 2.055 1.769 ... # ..$ ACGGCTCTTGCACA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 1.868 -0.479 ... # ..$ ACGGTAACGGTGGA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 2.893 ... # ..$ ACGGTCCTCGGGAA|Naive CD4 T : num [1:54] -0.381 2.035 -0.534 -0.439 -0.479 ... # ..$ ACGTCAGAGGGATG|Naive CD4 T : num [1:54] -0.381 2.502 -0.534 -0.439 -0.479 ... # ..$ ACGTGATGGGTCTA|Naive CD4 T : num [1:54] 2.084 -0.434 1.485 2.667 -0.479 ... # ..$ ACGTTACTTTCCAT|Naive CD4 T : num [1:54] -0.381 -0.434 2.572 -0.439 1.871 ... # ..$ ACGTTGGAAAAGCA|Naive CD4 T : num [1:54] 3.261 -0.434 2.449 -0.439 1.756 ... # ..$ ACGTTTACATCAGC|Naive CD4 T : num [1:54] -0.381 2.841 2.357 1.948 -0.479 ... # ..$ ACTAAAACCCACAA|Naive CD4 T : num [1:54] -0.381 -0.434 2.279 -0.439 -0.479 ... # ..$ ACTACGGACCTATT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 1.965 ... # ..$ ACTACGGATCGCTC|Naive CD4 T : num [1:54] -0.381 -0.434 2.782 1.898 1.627 ... # ..$ ACTACTACTAAGGA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # ..$ ACTATCACTGCCAA|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 2.517 ... # ..$ ACTCAGGACTGAAC|Naive CD4 T : num [1:54] 3.279 2.962 1.691 -0.439 3.036 ... # ..$ ACTCTCCTGACACT|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 3.222 ... # ..$ ACTCTCCTGCATAC|Naive CD4 T : num [1:54] -0.381 -0.434 -0.534 -0.439 -0.479 ... # .. [list output truncated] # $ long.res:&#39;data.frame&#39;: 142452 obs. of 5 variables: # ..$ cluster : chr [1:142452] &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... # ..$ gene : chr [1:142452] &quot;MAL&quot; &quot;LEF1&quot; &quot;TCF7&quot; &quot;PRKCQ-AS1&quot; ... # ..$ cell_type : chr [1:142452] &quot;Naive CD4 T&quot; &quot;Naive CD4 T&quot; &quot;Naive CD4 T&quot; &quot;Naive CD4 T&quot; ... # ..$ norm_value : num [1:142452] -0.381 -0.434 2.272 -0.439 -0.479 ... # ..$ cluster_name: Factor w/ 9 levels &quot;cluster 1 (6)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;scRNAdata&quot; # $ geneMode: chr &quot;all&quot; # $ geneType: chr &quot;unique|_&quot; Plot: # heatmap plot pdf(&#39;sc4.pdf&#39;,height = 10,width = 8,onefile = F) visCluster(object = st.data, plot.type = &quot;heatmap&quot;, markGenes = unique(pbmc.markers1$gene), column_title_rot = 45, cluster.order = 1:9) dev.off() Add enrichment annotation: # add GO annotation pdf(&#39;sc6.pdf&#39;,height = 12,width = 16,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, column_title_rot = 45, markGenes = unique(pbmc.markers1$gene), markGenes.side = &quot;left&quot;, annoTerm.data = enrich, line.side = &quot;left&quot;, cluster.order = c(1:9), add.bar = T) dev.off() "],["parse-preudotime-data.html", "Chapter 6 Parse preudotime data 6.1 Monocle2 implemention 6.2 Monocle3 implemention", " Chapter 6 Parse preudotime data Monocle is a widely used bioinformatics tool designed for analyzing single-cell RNA sequencing (scRNA-seq) data. It allows for trajectory inference, differential expression analysis, and clustering of cells, all of which help in understanding dynamic biological processes such as cell differentiation, development, and lineage relationships. ClusterGvis can be implemented with Monocle and visualize the trajectory data. 6.1 Monocle2 implemention The functions plot_pseudotime_heatmap, plot_genes_branched_heatmap, plot_multiple_branches_heatmap to visualize preudotime data in monocle2 version are slightly modified into plot_pseudotime_heatmap2, plot_genes_branched_heatmap2, plot_multiple_branches_heatmap2. The returned object can be recognized with visCluster directly. The test data is from monocle::load_lung(), which you can load directly following the code: data(&quot;HSMM&quot;) data(&quot;BEAM_res&quot;) data(&quot;sig_gene_names&quot;) 6.1.1 plot_pseudotime_heatmap2 Return heatmap only using return_heatmap=T: # return plot plot_pseudotime_heatmap2(HSMM[sig_gene_names[1:100],], num_clusters = 4, cores = 1, show_rownames = T, return_heatmap = T) Return list object containing clustered data: # test code df &lt;- plot_pseudotime_heatmap2(HSMM[sig_gene_names[1:100],], num_clusters = 4, cores = 1) # check data str(df) # List of 6 # $ wide.res :&#39;data.frame&#39;: 100 obs. of 102 variables: # ..$ gene : chr [1:100] &quot;TSPAN6&quot; &quot;C1orf112&quot; &quot;CYP51A1&quot; &quot;AK2&quot; ... # ..$ 1 : num [1:100] -1.573 2.783 -1.646 -0.566 2.264 ... # ..$ 2 : num [1:100] -1.55 2.65 -1.62 -0.57 2.19 ... # ..$ 3 : num [1:100] -1.524 2.517 -1.587 -0.575 2.118 ... # ... # ..$ 96 : num [1:100] 0.48 -1.421 0.363 2.647 -1.753 ... # ..$ 97 : num [1:100] 0.34 -1.46 0.21 2.86 -1.94 ... # ..$ 98 : num [1:100] 0.1988 -1.4958 0.0542 3 -2.1274 ... # .. [list output truncated] # $ long.res :&#39;data.frame&#39;: 10000 obs. of 5 variables: # ..$ cluster : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... # ..$ gene : chr [1:10000] &quot;TSPAN6&quot; &quot;CYP51A1&quot; &quot;AASS&quot; &quot;MGST1&quot; ... # ..$ cell_type : num [1:10000] 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:10000] -1.573 -1.646 -1.86 -0.457 -2.024 ... # ..$ cluster_name: Factor w/ 4 levels &quot;cluster 1 (14)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;monocle&quot; # $ geneMode : chr &quot;all&quot; # $ geneType : chr &quot;non-branched&quot; # $ pseudotime: num [1:100] 0 0.236 0.471 0.707 0.942 ... Line plot: # plot visCluster(object = df,plot.type = &quot;line&quot;) Heatmap: visCluster(object = df,plot.type = &quot;heatmap&quot;) Line annotation and mark gene names: gene = sample(df$wide.res$gene,20,replace = F) pdf(file = &quot;one-branch.pdf&quot;,height = 6,width = 7) visCluster(object = df, plot.type = &quot;both&quot;, markGenes = gene) dev.off() 6.1.2 plot_genes_branched_heatmap2 Return plot only: data(&quot;HSMM&quot;) data(&quot;BEAM_res&quot;) # return plot plot_genes_branched_heatmap2(HSMM[row.names(subset(BEAM_res,qval &lt; 1e-4)),], branch_point = 1, num_clusters = 4, cores = 1, use_gene_short_name = T, show_rownames = T, return_heatmap = T) Return data: # test code df &lt;- plot_genes_branched_heatmap2(HSMM[row.names(subset(BEAM_res,qval &lt; 1e-4)),], branch_point = 1, num_clusters = 4, cores = 1, use_gene_short_name = T, show_rownames = T) # check data str(df) # List of 6 # $ wide.res :&#39;data.frame&#39;: 36 obs. of 202 variables: # ..$ gene : chr [1:36] &quot;BIRC5&quot; &quot;CDKN3&quot; &quot;ACTA2&quot; &quot;EFEMP1&quot; ... # ..$ 1 : num [1:36] 1.544 2.571 1.329 -1.595 0.609 ... # ..$ 2 : num [1:36] 1.317 2.021 1.17 -1.45 0.498 ... # ..$ 3 : num [1:36] 1.101 1.505 1.015 -1.295 0.389 ... # .. [list output truncated] # $ long.res :&#39;data.frame&#39;: 7200 obs. of 5 variables: # ..$ cluster : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... # ..$ gene : chr [1:7200] &quot;BIRC5&quot; &quot;CDKN3&quot; &quot;STMN1&quot; &quot;CENPF&quot; ... # ..$ cell_type : num [1:7200] 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:7200] 1.544 2.571 0.609 1.807 2.177 ... # ..$ cluster_name: Factor w/ 4 levels &quot;cluster 1 (27)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;monocle&quot; # $ geneMode : chr &quot;all&quot; # $ geneType : chr &quot;branched&quot; # $ pseudotime: chr [1:200] &quot;Cell fate 1&quot; &quot;Cell fate 1&quot; &quot;Cell fate 1&quot; &quot;Cell fate 1&quot; ... Heatmap: visCluster(object = df,plot.type = &quot;heatmap&quot;) Line annotation: pdf(file = &quot;two-branch.pdf&quot;,height = 6,width = 7) visCluster(object = df, plot.type = &quot;both&quot;) dev.off() 6.1.3 plot_multiple_branches_heatmap2 Return plot only: # return plot plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval &lt; 1e-4)),], branches = c(1,3,4,5), num_clusters = 4, cores = 1, use_gene_short_name = T, show_rownames = T, return_heatmap = T) Return data: # test code df &lt;- plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval &lt; 1e-4)),], branches = c(1,3,4,5), num_clusters = 4, cores = 1, use_gene_short_name = T, show_rownames = T) # check data str(df) # List of 6 # $ wide.res :&#39;data.frame&#39;: 36 obs. of 402 variables: # ..$ gene : chr [1:36] &quot;BIRC5&quot; &quot;CDKN3&quot; &quot;ACTA2&quot; &quot;EFEMP1&quot; ... # ..$ 1 : num [1:36] 2.124 2.219 -0.908 -1.749 1.244 ... # ..$ 2 : num [1:36] 2.061 2.156 -0.937 -1.699 1.24 ... # ..$ 3 : num [1:36] 1.999 2.094 -0.965 -1.649 1.236 ... # $ long.res :&#39;data.frame&#39;: 14400 obs. of 5 variables: # ..$ cluster : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... # ..$ gene : chr [1:14400] &quot;BIRC5&quot; &quot;CDKN3&quot; &quot;STMN1&quot; &quot;CENPF&quot; ... # ..$ cell_type : num [1:14400] 1 1 1 1 1 1 1 1 1 1 ... # ..$ norm_value : num [1:14400] 2.12 2.22 1.24 2.01 2.71 ... # ..$ cluster_name: Factor w/ 4 levels &quot;cluster 1 (18)&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ type : chr &quot;monocle&quot; # $ geneMode : chr &quot;all&quot; # $ geneType : chr &quot;branched&quot; # $ pseudotime: Factor w/ 4 levels &quot;1&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;: 1 1 1 1 1 1 1 1 1 1 ... Heatmap: visCluster(object = df,plot.type = &quot;heatmap&quot;) library(RColorBrewer) pdf(file = &quot;multiple-branch.pdf&quot;,height = 6,width = 8) visCluster(object = df, plot.type = &quot;both&quot;, ht.col.list = list(col_range = seq(-2,2,length.out = 100), col_color = colorRampPalette(brewer.pal(9,&quot;PRGn&quot;))(100)), pseudotime_col = ggsci::pal_d3()(4)) dev.off() Add enrichment annotation for each cluster: # enrich df &lt;- plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval &lt; 0.1)),], branches = c(1,3,4,5), num_clusters = 4, cores = 1, use_gene_short_name = T, show_rownames = T) # enrich for clusters library(org.Hs.eg.db) enrich &lt;- enrichCluster(object = df, OrgDb = org.Hs.eg.db, type = &quot;BP&quot;, organism = &quot;hsa&quot;, pvalueCutoff = 0.5, topn = 5, seed = 5201314) # check head(enrich[1:3,]) # group Description pvalue ratio # GO:1904238 C1 pericyte cell differentiation 0.002325826 25 # GO:0034982 C1 mitochondrial protein processing 0.002748268 25 # GO:0072537 C1 fibroblast activation 0.002748268 25 markGenes = sample(unique(df$wide.res$gene),25,replace = F) # PLOT pdf(&#39;branch-enrich.pdf&#39;,height = 9,width = 16,onefile = F) visCluster(object = df, plot.type = &quot;both&quot;, column_names_rot = 45, show_row_dend = F, markGenes = markGenes, markGenes.side = &quot;left&quot;, annoTerm.data = enrich, go.col = rep(jjAnno::useMyCol(&quot;calm&quot;,n = 4),each = 5), add.bar = T, line.side = &quot;left&quot;) dev.off() 6.2 Monocle3 implemention There is a big update for monocle3 and much of functions have been removed from monocle3. We supply pre_pseudotime_matrix function to extract differentiated genes and the ouput can be used with ClusterGvis. Here we run an example workflow with monocle3: # devtools::install_github(&#39;cole-trapnell-lab/monocle3&#39;) library(monocle3) library(dplyr) cell_metadata &lt;- readRDS(system.file(&#39;extdata&#39;, &#39;worm_embryo/worm_embryo_coldata.rds&#39;, package=&#39;monocle3&#39;)) gene_metadata &lt;- readRDS(system.file(&#39;extdata&#39;, &#39;worm_embryo/worm_embryo_rowdata.rds&#39;, package=&#39;monocle3&#39;)) expression_matrix &lt;- readRDS(system.file(&#39;extdata&#39;, &#39;worm_embryo/worm_embryo_expression_matrix.rds&#39;, package=&#39;monocle3&#39;)) cds &lt;- new_cell_data_set(expression_data=expression_matrix, cell_metadata=cell_metadata, gene_metadata=gene_metadata) cds &lt;- preprocess_cds(cds) cds &lt;- align_cds(cds, alignment_group = &quot;batch&quot;, residual_model_formula_str = &quot;~ bg.300.loading + bg.400.loading + bg.500.1.loading + bg.500.2.loading + bg.r17.loading + bg.b01.loading + bg.b02.loading&quot;) cds &lt;- reduce_dimension(cds) cds &lt;- cluster_cells(cds) cds &lt;- learn_graph(cds) cds &lt;- order_cells(cds, root_pr_nodes=&#39;Y_21&#39;) modulated_genes &lt;- graph_test(cds, neighbor_graph = &quot;principal_graph&quot;, cores = 4) genes &lt;- row.names(subset(modulated_genes, q_value == 0 &amp; morans_I &gt; 0.25)) Extact expression matrix: mat &lt;- pre_pseudotime_matrix(cds_obj = cds, gene_list = genes) # check head(mat[1:5,1:5]) # 1 2 3 4 5 # WBGene00013882 -0.7265393 -0.7263892 -0.7262392 -0.7260891 -0.7259390 # WBGene00002085 0.8059370 0.8076543 0.8093716 0.8110889 0.8128062 # WBGene00016114 2.8256183 2.8198074 2.8139964 2.8081855 2.8023746 # WBGene00012753 2.7917688 2.7861478 2.7805268 2.7749058 2.7692848 # WBGene00015354 -1.1233255 -1.1229564 -1.1225872 -1.1222180 -1.1218489 Run ClusterGvis workflow: # kmeans ck &lt;- clusterData(exp = mat, cluster.method = &quot;kmeans&quot;, cluster.num = 5) # add line annotation pdf(&#39;monocle3.pdf&#39;,height = 10,width = 8,onefile = F) visCluster(object = ck, plot.type = &quot;both&quot;, add.sampleanno = F, markGenes = sample(rownames(mat),30,replace = F)) dev.off() "],["add-custom-annotation.html", "Chapter 7 Add custom annotation", " Chapter 7 Add custom annotation I was thinking that ClusterGVis has some limitations when adding annotations to heatmaps. It would be better if we could customize and add relevant plots to each cluster, rather than being restricted to the data within the heatmap. So, you simply need to create the plot (using ggplot2), and then insert it into the relevant cluster, not limiting it to the heatmap data. For example, when displaying marker genes in single-cell analysis, you could insert a feature plot (scatterplot) of the marker genes on the right side. Of course, any other kind of plot could also be used. Additionally, Ive added a new gglist parameter to ClusterGVis. You just need to provide a list of ggplot objects, making sure that the order corresponds correctly. Create a scatter plot for marker genes for each celtype: # find markers for every cluster compared to all remaining cells # report only the positive ones pbmc.markers.all &lt;- Seurat::FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) # get top 10 genes pbmc.markers &lt;- pbmc.markers.all %&gt;% dplyr::group_by(cluster) %&gt;% dplyr::top_n(n = 4, wt = avg_log2FC) # prepare data from seurat object st.data &lt;- prepareDataFromscRNA(object = pbmc, diffData = pbmc.markers, showAverage = TRUE) # loop plot lapply(unique(pbmc.markers$cluster), function(x){ tmp &lt;- pbmc.markers |&gt; dplyr::filter(cluster == x) # plot p &lt;- Seurat::FeaturePlot(object = pbmc, features = tmp$gene, ncol = 4) return(p) }) -&gt; gglist # assign names names(gglist) &lt;- paste(&quot;C&quot;,1:9,sep = &quot;&quot;) Insert scatter plot: pdf(&#39;sc_ggplot.pdf&#39;,height = 16,width = 18,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, line.side = &quot;left&quot;, column_names_rot = 45, markGenes = pbmc.markers$gene, cluster.order = c(1:9), ggplot.panel.arg = c(4,1,24,&quot;grey90&quot;,NA), gglist = gglist) dev.off() Use scRNAtoolVis to generate scatter plot: library(scRNAtoolVis) # loop plot lapply(unique(pbmc.markers$cluster), function(x){ tmp &lt;- pbmc.markers |&gt; dplyr::filter(cluster == x) # plot p &lt;- featureCornerAxes(object = pbmc, reduction = &#39;umap&#39;, groupFacet = NULL, relLength = 0.65, relDist = 0.2, cornerTextSize = 2.5, features = tmp$gene, show.legend = F) return(p) }) -&gt; gglist # assign names names(gglist) &lt;- paste(&quot;C&quot;,1:9,sep = &quot;&quot;) # insert scatter plot pdf(&#39;sc_ggplot_scRNAtoolVis.pdf&#39;,height = 16,width = 16,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, line.side = &quot;left&quot;, column_names_rot = 45, markGenes = pbmc.markers$gene, cluster.order = c(1:9), ggplot.panel.arg = c(5,1,13,&quot;grey90&quot;,NA), gglist = gglist) dev.off() Add custom enrichment plot: # enrich for clusters enrich &lt;- enrichCluster(object = st.data, OrgDb = org.Hs.eg.db, type = &quot;BP&quot;, organism = &quot;hsa&quot;, pvalueCutoff = 0.5, topn = 5, seed = 5201314) # check head(enrich,3) # group Description pvalue ratio # GO:0002573 C1 myeloid leukocyte differentiation 0.0003941646 66.66667 # GO:0050870 C1 positive regulation of T cell activation 0.0005222343 66.66667 # GO:1903039 C1 positive regulation of leukocyte cell-cell adhesion 0.0006265618 66.66667 # barplot palette = c(&quot;Grays&quot;,&quot;Light Grays&quot;,&quot;Blues2&quot;,&quot;Blues3&quot;,&quot;Purples2&quot;,&quot;Purples3&quot;,&quot;Reds2&quot;,&quot;Reds3&quot;,&quot;Greens2&quot;) # loop lapply(seq_along(unique(enrich$group)), function(x){ tmp &lt;- enrich |&gt; dplyr::filter(group == unique(enrich$group)[x]) |&gt; dplyr::arrange(desc(pvalue)) tmp$Description &lt;- factor(tmp$Description,levels = tmp$Description) # plot p &lt;- ggplot(tmp) + geom_col(aes(x = -log10(pvalue),y = Description,fill = -log10(pvalue)), width = 0.75) + geom_line(aes(x = log10(ratio),y = as.numeric(Description)),color = &quot;grey50&quot;) + geom_point(aes(x = log10(ratio),y = Description),size = 3,color = &quot;orange&quot;) + theme_bw() + scale_y_discrete(position = &quot;right&quot;, labels = function(x) stringr::str_wrap(x, width = 40)) + scale_x_continuous(sec.axis = sec_axis(~.,name = &quot;log10(ratio)&quot;)) + colorspace::scale_fill_binned_sequential(palette = palette[x]) + ylab(&quot;&quot;) return(p) }) -&gt; gglist # assign names names(gglist) &lt;- paste(&quot;C&quot;,1:9,sep = &quot;&quot;) # insert bar plot pdf(&#39;sc_ggplot_go.pdf&#39;,height = 20,width = 16,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, line.side = &quot;left&quot;, column_names_rot = 45, markGenes = pbmc.markers$gene, cluster.order = c(1:9), ggplot.panel.arg = c(5,0.5,16,&quot;grey90&quot;,NA), gglist = gglist) dev.off() Add GO and KEGG enrichment annotation: # enrich for clusters enrich &lt;- enrichCluster(object = st.data, OrgDb = org.Hs.eg.db, type = &quot;BP&quot;, organism = &quot;hsa&quot;, pvalueCutoff = 0.5, topn = 5, seed = 5201314) # check head(enrich,3) # group Description pvalue ratio # GO:0002573 C1 myeloid leukocyte differentiation 0.0003941646 66.66667 # GO:0050870 C1 positive regulation of T cell activation 0.0005222343 66.66667 # GO:1903039 C1 positive regulation of leukocyte cell-cell adhesion 0.0006265618 66.66667 enrich.KEGG &lt;- enrichCluster(object = st.data, OrgDb = org.Hs.eg.db, type = &quot;KEGG&quot;, organism = &quot;hsa&quot;, pvalueCutoff = 0.9, topn = 5, seed = 5201314) # check head(enrich.KEGG,3) # group Description pvalue ratio # hsa00640 C1 Propanoate metabolism 0.01115231 33.33333 # hsa05216 C1 Thyroid cancer 0.01288734 33.33333 # hsa00620 C1 Pyruvate metabolism 0.01635129 33.33333 palette = c(&quot;Grays&quot;,&quot;Light Grays&quot;,&quot;Blues2&quot;,&quot;Blues3&quot;,&quot;Purples2&quot;,&quot;Purples3&quot;,&quot;Reds2&quot;,&quot;Reds3&quot;,&quot;Greens2&quot;) # loop lapply(seq_along(unique(enrich$group)), function(x){ # go plot tmp &lt;- enrich |&gt; dplyr::filter(group == unique(enrich$group)[x]) |&gt; dplyr::arrange(desc(pvalue)) tmp$Description &lt;- factor(tmp$Description,levels = tmp$Description) # plot p &lt;- ggplot(tmp) + geom_col(aes(x = -log10(pvalue),y = Description,fill = -log10(pvalue)), width = 0.75) + geom_line(aes(x = log10(ratio),y = as.numeric(Description)),color = &quot;grey50&quot;) + geom_point(aes(x = log10(ratio),y = Description),size = 3,color = &quot;orange&quot;) + theme_bw() + scale_y_discrete(position = &quot;right&quot;, labels = function(x) stringr::str_wrap(x, width = 40)) + scale_x_continuous(sec.axis = sec_axis(~.,name = &quot;log10(ratio)&quot;)) + colorspace::scale_fill_binned_sequential(palette = palette[x]) + ylab(&quot;&quot;) # plot kegg tmp.kg &lt;- enrich.KEGG |&gt; dplyr::filter(group == unique(enrich.KEGG$group)[x]) |&gt; dplyr::arrange(desc(pvalue)) tmp.kg$Description &lt;- factor(tmp.kg$Description,levels = tmp.kg$Description) # plot pk &lt;- ggplot(tmp.kg) + geom_segment(aes(x = 0,xend = -log10(pvalue),y = Description,yend = Description), lty = &quot;dashed&quot;,linewidth = 0.75) + geom_point(aes(x = -log10(pvalue),y = Description,color = -log10(pvalue)),size = 5) + theme_bw() + scale_y_discrete(position = &quot;right&quot;, labels = function(x) stringr::str_wrap(x, width = 40)) + colorspace::scale_color_binned_sequential(palette = palette[x]) + ylab(&quot;&quot;) + xlab(&quot;-log10(pvalue)&quot;) # combine cb &lt;- cowplot::plot_grid(plotlist = list(p,pk)) return(cb) }) -&gt; gglist # assign names names(gglist) &lt;- paste(&quot;C&quot;,1:9,sep = &quot;&quot;) # insert bar plot pdf(&#39;sc_ggplot_gokegg.pdf&#39;,height = 20,width = 22,onefile = F) visCluster(object = st.data, plot.type = &quot;both&quot;, line.side = &quot;left&quot;, column_names_rot = 45, markGenes = pbmc.markers$gene, cluster.order = c(1:9), ggplot.panel.arg = c(5,0.5,32,&quot;grey90&quot;,NA), gglist = gglist) dev.off() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
